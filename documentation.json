{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-c8e5bf8cd45899f9e7e6bed7dc388a1a",
            "file": "src/app/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import * as fromErrors from './errors.reducer';\r\nimport * as fromCounter from './counter.reducer';\r\nimport { ActionReducerMap, createSelector } from '@ngrx/store';\r\nimport * as models from '../models';\r\n\r\nexport interface AppState {\r\n  counter: fromCounter.CounterState;\r\n  errors: fromErrors.ErrorState;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<AppState> = {\r\n  counter: fromCounter.reducer,\r\n  errors: fromErrors.reducer\r\n};\r\n\r\n\r\n// Selectors \"Dux\"\r\n\r\n// 1. Feature Selector (if you are in a feature)\r\n\r\n// 2. A selector per property on the state (per branch)\r\nfunction selectCounterBranch(state: AppState): fromCounter.CounterState {\r\n  return state.counter;\r\n}\r\n\r\nfunction selectErrorsBranch(state: AppState): fromErrors.ErrorState {\r\n  return state.errors;\r\n}\r\n// 3. Any helpers you might need\r\n// function selectCountCurrent(state: AppState): number {\r\n//   return state.counter.current;\r\n// }\r\nconst selectCountCurrent = createSelector(\r\n  selectCounterBranch,\r\n  c => c.current);\r\n// 4. What the components need\r\n\r\n// TODO: We need one that returns the current count for the counter\r\n\r\n// export function getCurrentCount(state: AppState): number {\r\n//   return state.counter.current;\r\n// }\r\n\r\nexport const selectCounterBy = createSelector(\r\n  selectCounterBranch,\r\n  b => b.by\r\n);\r\n\r\nexport const selectGetCurrentCount = createSelector(\r\n  selectCountCurrent,\r\n  c => c\r\n);\r\n\r\n// one says if the reset button should be disabled\r\n// export function selectCounterResetDisabled(state: AppState): boolean {\r\n//   return state.counter.current === 0;\r\n// }\r\nexport const selectCounterResetDisabled = createSelector(\r\n  selectCountCurrent,\r\n  c => c === 0\r\n);\r\n\r\n// one says if the decrement button should be disabled\r\n// export function selectCountDecrementDisabled(state: AppState): boolean {\r\n//   return state.counter.current === 0;\r\n// }\r\nexport const selectCountDecrementDisabled = createSelector(\r\n  selectCountCurrent,\r\n  selectCounterBy,\r\n  (c, b) => (c - b) < 0\r\n);\r\n\r\nexport const selectCounterDashboard = createSelector(\r\n  selectCountCurrent,\r\n  selectCounterBy,\r\n  (current, by) => ({ by, current } as models.CounterDashboard)\r\n);\r\n\r\n\r\nexport const selectHasError = createSelector(\r\n  selectErrorsBranch,\r\n  b => b.hasError\r\n);\r\n\r\nexport const selectErrorMessage = createSelector(\r\n  selectErrorsBranch,\r\n  b => b.message\r\n);\r\n",
            "properties": [
                {
                    "name": "counter",
                    "type": "fromCounter.CounterState",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "errors",
                    "type": "fromErrors.ErrorState",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CounterDashboard",
            "id": "interface-CounterDashboard-ed64401e7f80be7535495dfd2de6675d",
            "file": "src/app/models/dashboard.ts",
            "type": "interface",
            "sourceCode": "export interface ShoppingDashboard {\r\n  totalItems: number;\r\n  purchasedItems: number;\r\n  unpurchasedItems: number;\r\n}\r\n\r\nexport interface CounterDashboard {\r\n  current: number;\r\n  by: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "by",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "current",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CounterState",
            "id": "interface-CounterState-a03ab47ba56e5f2d1bbfe37b2cb19bcd",
            "file": "src/app/reducers/counter.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as actions from '../actions/counter.actions';\r\n\r\nexport interface CounterState {\r\n  current: number;\r\n  by: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  current: 0,\r\n  by: 1\r\n};\r\n\r\nconst myReducer = createReducer(\r\n  initialState,\r\n  on(actions.countIncremented, (s) => ({ ...s, current: s.current + s.by })),\r\n  on(actions.countDecremented, (s) => ({ ...s, current: s.current - s.by })),\r\n  on(actions.countReset, () => initialState),\r\n  on(actions.countBySet, (s, a) => ({ ...s, by: a.by }))\r\n  // on(actions.countBySet, (state, action) => {\r\n  //   state.by = action.by;\r\n  //   return state;\r\n  // })\r\n);\r\n// reducer(currentState, action) => newState\r\nexport function reducer(state: CounterState = initialState, action: Action): CounterState {\r\n  // this must be a PURE function\r\n  // you cannot change the arguments in any way (state, or the action)\r\n  // you can only produce a new value\r\n  // You cannot do \"side effects\" here.\r\n  //  - Side effects are things like calling APIs, changing a route, updating some other data, etc.\r\n\r\n  return myReducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "by",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "current",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ErrorState",
            "id": "interface-ErrorState-78c772b28455047449a690dc84d0928a",
            "file": "src/app/reducers/errors.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as actions from '../actions/app.actions';\r\n\r\nexport interface ErrorState {\r\n  message: string;\r\n  feature: string;\r\n  hasError: boolean;\r\n}\r\n\r\nconst initialState: ErrorState = {\r\n  message: null,\r\n  feature: null,\r\n  hasError: false\r\n};\r\n\r\n\r\n\r\nconst myReducer = createReducer(\r\n  initialState,\r\n  on(actions.applicationError, (s, a) => ({\r\n    hasError: true,\r\n    message: `Feature ${a.feature} had an error: ${a.error}`,\r\n    feature: a.feature\r\n  })),\r\n  on(actions.applicationErrorCleared, () => initialState)\r\n);\r\n\r\nexport function reducer(state: ErrorState, action: Action): ErrorState {\r\n  return myReducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "feature",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hasError",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PlaylistsResponse",
            "id": "interface-PlaylistsResponse-ca385428524562b4c6fb7f659008208c",
            "file": "src/app/feature/playlists/services/playlist-data.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { SongEntity } from '../reducers/songs.reducer';\r\nimport { map } from 'rxjs/operators';\r\n@Injectable()\r\nexport class PlaylistDataService {\r\n\r\n  readonly baseUrl = environment.playlistUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addASong(request: SongEntity): Observable<SongEntity> {\r\n    const toSend = {\r\n      title: request.title,\r\n      artist: request.artist,\r\n      album: request.album\r\n    };\r\n    return this.http.post<SongEntity>(this.baseUrl, toSend);\r\n  }\r\n\r\n\r\n  getAll(): Observable<SongEntity[]> {\r\n    return this.http.get<PlaylistsResponse>(this.baseUrl)\r\n      .pipe(\r\n        map(response => response.data)\r\n      );\r\n  }\r\n}\r\n\r\ninterface PlaylistsResponse {\r\n  data: SongEntity[];\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "SongEntity[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PlaylistState",
            "id": "interface-PlaylistState-1c0adc7cf7af0208e8bf39f074a55990",
            "file": "src/app/feature/playlists/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import * as fromSongs from './songs.reducer';\r\nimport { ActionReducerMap, createSelector, createFeatureSelector } from '@ngrx/store';\r\n\r\nexport const featureName = 'playlistFeature';\r\nimport * as models from '../models';\r\nexport interface PlaylistState {\r\n  songs: fromSongs.SongState;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<PlaylistState> = {\r\n  songs: fromSongs.reducer\r\n};\r\n\r\n// 1. Feature Selector\r\nconst selectFeature = createFeatureSelector<PlaylistState>(featureName);\r\n// 2. One per branch of the state (so songs...)\r\nconst selectSongsBranch = createSelector(\r\n  selectFeature,\r\n  f => f.songs\r\n);\r\n// 3. Helpers\r\nconst { selectAll: selectSongArray } = fromSongs.adapter.getSelectors(selectSongsBranch);\r\n\r\n// 4. What you components need\r\n\r\n// TODO: We need one that returns a SongSummaryItem[] for our song list component.\r\n\r\nexport const selectSongListModel = createSelector(\r\n  selectSongArray,\r\n  songs => songs.map(song => {\r\n    return {\r\n      ...song,\r\n      isSaved: !song.id.startsWith('TEMP')\r\n    } as models.SongSummaryModel;\r\n  })\r\n);\r\n",
            "properties": [
                {
                    "name": "songs",
                    "type": "fromSongs.SongState",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingDashboard",
            "id": "interface-ShoppingDashboard-ed64401e7f80be7535495dfd2de6675d",
            "file": "src/app/models/dashboard.ts",
            "type": "interface",
            "sourceCode": "export interface ShoppingDashboard {\r\n  totalItems: number;\r\n  purchasedItems: number;\r\n  unpurchasedItems: number;\r\n}\r\n\r\nexport interface CounterDashboard {\r\n  current: number;\r\n  by: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "purchasedItems",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "totalItems",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "unpurchasedItems",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItem",
            "id": "interface-ShoppingListItem-c78cc0ca0a6cdc72a74644098550f13f",
            "file": "src/app/feature/communications/models/shopping-list-item.ts",
            "type": "interface",
            "sourceCode": "export interface ShoppingListItem {\r\n  id: string;\r\n  description: string;\r\n  purchased: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "purchased",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SongEntity",
            "id": "interface-SongEntity-916d7313476f7869318477ff001f2f32",
            "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
            "type": "interface",
            "sourceCode": "import { EntityState, createEntityAdapter } from '@ngrx/entity';\r\nimport { createReducer, Action, on } from '@ngrx/store';\r\nimport * as actions from '../actions/song.actions';\r\n\r\nexport interface SongEntity {\r\n  id: string;\r\n  title: string;\r\n  artist: string;\r\n  album?: string;\r\n}\r\n\r\nexport interface SongState extends EntityState<SongEntity> {\r\n\r\n}\r\n\r\nexport const adapter = createEntityAdapter<SongEntity>();\r\n\r\nconst initialState = adapter.getInitialState();\r\n\r\n\r\nconst reducerFunction = createReducer(\r\n  initialState,\r\n  on(actions.songAdded, (s, a) => adapter.addOne(a.payload, s)),\r\n  on(actions.loadSongsSucceeded, (s, a) => adapter.setAll(a.payload, s)),\r\n  on(actions.songAddedSuccessfully, (s, a) => {\r\n    const tempState = adapter.removeOne(a.oldId, s);\r\n    return adapter.addOne(a.payload, tempState); // ole' switcharoo\r\n  }),\r\n  on(actions.songAddedFailure, (s, a) => adapter.removeOne(a.oldId, s))\r\n);\r\n\r\nexport function reducer(state: SongState = initialState, action: Action): SongState {\r\n  return reducerFunction(state, action);\r\n}\r\n\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "album",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "artist",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SongState",
            "id": "interface-SongState-916d7313476f7869318477ff001f2f32",
            "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
            "type": "interface",
            "sourceCode": "import { EntityState, createEntityAdapter } from '@ngrx/entity';\r\nimport { createReducer, Action, on } from '@ngrx/store';\r\nimport * as actions from '../actions/song.actions';\r\n\r\nexport interface SongEntity {\r\n  id: string;\r\n  title: string;\r\n  artist: string;\r\n  album?: string;\r\n}\r\n\r\nexport interface SongState extends EntityState<SongEntity> {\r\n\r\n}\r\n\r\nexport const adapter = createEntityAdapter<SongEntity>();\r\n\r\nconst initialState = adapter.getInitialState();\r\n\r\n\r\nconst reducerFunction = createReducer(\r\n  initialState,\r\n  on(actions.songAdded, (s, a) => adapter.addOne(a.payload, s)),\r\n  on(actions.loadSongsSucceeded, (s, a) => adapter.setAll(a.payload, s)),\r\n  on(actions.songAddedSuccessfully, (s, a) => {\r\n    const tempState = adapter.removeOne(a.oldId, s);\r\n    return adapter.addOne(a.payload, tempState); // ole' switcharoo\r\n  }),\r\n  on(actions.songAddedFailure, (s, a) => adapter.removeOne(a.oldId, s))\r\n);\r\n\r\nexport function reducer(state: SongState = initialState, action: Action): SongState {\r\n  return reducerFunction(state, action);\r\n}\r\n\r\n\r\n\r\n\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "SongSummaryModel",
            "id": "interface-SongSummaryModel-521c9ea24bc22897e231e6186bd4a875",
            "file": "src/app/feature/playlists/models/song-summary-item.ts",
            "type": "interface",
            "sourceCode": "export interface SongSummaryModel {\r\n  id: string;\r\n  title: string;\r\n  artist: string;\r\n  album?: string;\r\n  isSaved: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "album",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "artist",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isSaved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-38c3b961f414dce3eccfad16750ee346",
            "file": "src/app/feature/playlists/effects/app.effects.ts",
            "properties": [
                {
                    "name": "loadSongs$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(appActions.applicationStarted),\r\n      map(() => actions.loadSongs())\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "percolateError$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.songAddedFailure),\r\n      map(e => appActions.applicationError({\r\n        feature: 'Playlists',\r\n        error: e.errorMessage\r\n      }))\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as actions from '../actions/song.actions';\r\nimport * as appActions from '../../../actions/app.actions';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { map } from 'rxjs/operators';\r\n@Injectable()\r\nexport class AppEffects {\r\n\r\n  percolateError$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.songAddedFailure),\r\n      map(e => appActions.applicationError({\r\n        feature: 'Playlists',\r\n        error: e.errorMessage\r\n      }))\r\n    )\r\n  );\r\n\r\n  loadSongs$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(appActions.applicationStarted),\r\n      map(() => actions.loadSongs())\r\n    )\r\n  );\r\n\r\n  constructor(private actions$: Actions) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CounterEffects",
            "id": "injectable-CounterEffects-508131979b070870736c0651674ae594",
            "file": "src/app/effects/counter.effects.ts",
            "properties": [
                {
                    "name": "readSavedCountBy$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(appActions.applicationStarted),\r\n      map(() => localStorage.getItem('by')), // ('1' | '3' | '5') || null\r\n      filter(by => by !== null), // stop here if it is null. They didn't save anything.\r\n      map(by => parseInt(by, 10)), // ('1' | '3' | '5' ) turn it into a base 10 number from the string => (1 | 3 | 5)\r\n      map(by => actions.countBySet({ by })) // what comes out here gets sent to the reducer.\r\n    )\r\n    , { dispatch: true })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "saveCountBy$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.countBySet),\r\n      tap(a => localStorage.setItem('by', a.by.toString()))\r\n    )\r\n    , { dispatch: false })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { filter, map, tap } from 'rxjs/operators';\r\nimport * as actions from '../actions/counter.actions';\r\nimport * as appActions from '../actions/app.actions';\r\n\r\n@Injectable()\r\nexport class CounterEffects {\r\n\r\n  // when we get an applicationStarted\r\n  // check localStorage for 'by'\r\n  // If it is there\r\n  //  - turn it into a actions.countBySet(by)\r\n  //  - if it isn't there (it is null), don't do anything.\r\n  readSavedCountBy$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(appActions.applicationStarted),\r\n      map(() => localStorage.getItem('by')), // ('1' | '3' | '5') || null\r\n      filter(by => by !== null), // stop here if it is null. They didn't save anything.\r\n      map(by => parseInt(by, 10)), // ('1' | '3' | '5' ) turn it into a base 10 number from the string => (1 | 3 | 5)\r\n      map(by => actions.countBySet({ by })) // what comes out here gets sent to the reducer.\r\n    )\r\n    , { dispatch: true });\r\n\r\n\r\n\r\n  // logItAll$ = createEffect(() =>\r\n  //   this.actions$.pipe(\r\n  //     tap(a => console.log(`Got an action of type ${a.type}`))\r\n  //   ), { dispatch: false }\r\n  // );\r\n  // actions.countBySet => save it.  => done!\r\n\r\n  saveCountBy$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.countBySet),\r\n      tap(a => localStorage.setItem('by', a.by.toString()))\r\n    )\r\n    , { dispatch: false });\r\n\r\n  constructor(private actions$: Actions) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PlaylistDataService",
            "id": "injectable-PlaylistDataService-ca385428524562b4c6fb7f659008208c",
            "file": "src/app/feature/playlists/services/playlist-data.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.playlistUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addASong",
                    "args": [
                        {
                            "name": "request",
                            "type": "SongEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SongEntity>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "SongEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SongEntity[]>",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { SongEntity } from '../reducers/songs.reducer';\r\nimport { map } from 'rxjs/operators';\r\n@Injectable()\r\nexport class PlaylistDataService {\r\n\r\n  readonly baseUrl = environment.playlistUrl;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addASong(request: SongEntity): Observable<SongEntity> {\r\n    const toSend = {\r\n      title: request.title,\r\n      artist: request.artist,\r\n      album: request.album\r\n    };\r\n    return this.http.post<SongEntity>(this.baseUrl, toSend);\r\n  }\r\n\r\n\r\n  getAll(): Observable<SongEntity[]> {\r\n    return this.http.get<PlaylistsResponse>(this.baseUrl)\r\n      .pipe(\r\n        map(response => response.data)\r\n      );\r\n  }\r\n}\r\n\r\ninterface PlaylistsResponse {\r\n  data: SongEntity[];\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SongEffects",
            "id": "injectable-SongEffects-a2c2f26e2109a08375cbf3e7cf254e2b",
            "file": "src/app/feature/playlists/effects/song.effects.ts",
            "properties": [
                {
                    "name": "addSong$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.songAdded),\r\n      switchMap(orignalAction => this.service.addASong(orignalAction.payload)\r\n        .pipe(\r\n          map(response => actions.songAddedSuccessfully({\r\n            oldId: orignalAction.payload.id,\r\n            payload: response\r\n          })),\r\n          catchError(response => of(actions.songAddedFailure({\r\n            oldId: orignalAction.payload.id,\r\n            errorMessage: `Sorry, could not the song ${orignalAction.payload.title}`\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "loadSongs$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.loadSongs),\r\n      switchMap(() => this.service.getAll()\r\n        .pipe(\r\n          map(response => actions.loadSongsSucceeded({ payload: response }))\r\n        )\r\n      )\r\n    )\r\n    , { dispatch: true })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as actions from '../actions/song.actions';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { PlaylistDataService } from '../services/playlist-data.service';\r\nimport { of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class SongEffects {\r\n\r\n  // action.songAdded => songAddedSuccessfully || songAddedFailure\r\n  addSong$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.songAdded),\r\n      switchMap(orignalAction => this.service.addASong(orignalAction.payload)\r\n        .pipe(\r\n          map(response => actions.songAddedSuccessfully({\r\n            oldId: orignalAction.payload.id,\r\n            payload: response\r\n          })),\r\n          catchError(response => of(actions.songAddedFailure({\r\n            oldId: orignalAction.payload.id,\r\n            errorMessage: `Sorry, could not the song ${orignalAction.payload.title}`\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // actions.loadSongs => loadSongsSucceeded || loadSongsFailed\r\n  loadSongs$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(actions.loadSongs),\r\n      switchMap(() => this.service.getAll()\r\n        .pipe(\r\n          map(response => actions.loadSongsSucceeded({ payload: response }))\r\n        )\r\n      )\r\n    )\r\n    , { dispatch: true });\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private service: PlaylistDataService, // todo: set up a provider\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "service",
                        "type": "PlaylistDataService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "PlaylistDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MessageService",
            "id": "class-MessageService-98e2455666fc21c0b35d35bc00375622",
            "file": "src/app/feature/communications/services/message.service.ts",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n\r\nexport class MessageService {\r\n\r\n  private secretMessage = 'default';\r\n\r\n  private subject = new BehaviorSubject<string>(this.secretMessage);\r\n\r\n\r\n  getMessageObservable(): Observable<string> {\r\n    return this.subject.asObservable();\r\n  }\r\n\r\n  setMessage(val: string): void {\r\n    this.secretMessage = val;\r\n    this.subject.next(this.secretMessage);\r\n  }\r\n\r\n  getMessage(): string {\r\n    return this.secretMessage;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "secretMessage",
                    "defaultValue": "'default'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<string>(this.secretMessage)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "getMessageObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "setMessage",
                    "args": [
                        {
                            "name": "val",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ShoppingDataService",
            "id": "class-ShoppingDataService-138ecf627544ac3a6676ae7785aa59b1",
            "file": "src/app/feature/communications/services/shopping-data.service.ts",
            "type": "class",
            "sourceCode": "import { ShoppingListItem } from '../models';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport class ShoppingDataService {\r\n\r\n  private fakeData: ShoppingListItem[] = [\r\n    { id: '1', description: 'Ice Cream Cones', purchased: false },\r\n    { id: '2', description: 'Shoe Polish', purchased: true }\r\n  ];\r\n  private maxId = 3;\r\n\r\n  private subject = new BehaviorSubject<ShoppingListItem[]>(this.fakeData);\r\n\r\n  getObservable(): Observable<ShoppingListItem[]> {\r\n    return this.subject.asObservable();\r\n  }\r\n\r\n  addItem(description: string): void {\r\n    this.fakeData.push({ id: (this.maxId++).toString(), description, purchased: false });\r\n    // this would be some async code that goes to the api.\r\n    this.subject.next(this.fakeData);\r\n  }\r\n\r\n  markItemAsPurchased(item: ShoppingListItem): void {\r\n    const storedItem = this.fakeData.filter(i => i.id === item.id)[0].purchased = true;\r\n    // this would be some async code that goes to the api.\r\n\r\n    this.subject.next(this.fakeData);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "fakeData",
                    "defaultValue": "[\r\n    { id: '1', description: 'Ice Cream Cones', purchased: false },\r\n    { id: '2', description: 'Shoe Polish', purchased: true }\r\n  ]",
                    "type": "ShoppingListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "maxId",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new BehaviorSubject<ShoppingListItem[]>(this.fakeData)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem[]>",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "markItemAsPurchased",
                    "args": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cb622c1efd6885e4628665f106074c67",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Jeff Was Here'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { applicationStarted } from './actions/app.actions';\nimport { AppState } from './reducers';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Jeff Was Here';\n\n  constructor(private store: Store<AppState>) {\n    store.dispatch(applicationStarted());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n  color: purple\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"container-fluid\">\n  <app-error-display></app-error-display>\n</div>\n<app-masthead></app-masthead>\n<main class=\"container\">\n  <app-nav></app-nav>\n\n  <router-outlet></router-outlet>\n</main>\n"
        },
        {
            "name": "CommunicationsComponent",
            "id": "component-CommunicationsComponent-a2b09d58c8ca2ef4bdb85537446f287c",
            "file": "src/app/feature/communications/communications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-communications",
            "styleUrls": [
                "./communications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./communications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-communications',\n  templateUrl: './communications.component.html',\n  styleUrls: ['./communications.component.scss']\n})\nexport class CommunicationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./communications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <h2>Communications</h2>\n</header>\n<section class=\"row\">\n  <div class=\"col\">\n    <app-lhs></app-lhs>\n  </div>\n  <div class=\"col\">\n    <app-rhs></app-rhs>\n  </div>\n</section>\n<section>\n  <app-shopping></app-shopping>\n</section>\n"
        },
        {
            "name": "CountbyComponent",
            "id": "component-CountbyComponent-096f0819dec230b7949fd1b4514e9f86",
            "file": "src/app/components/countby/countby.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-countby",
            "styleUrls": [
                "./countby.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./countby.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "by$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "countBy",
                    "args": [
                        {
                            "name": "by",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "by",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { countBySet } from 'src/app/actions/counter.actions';\nimport { AppState, selectCounterBy } from 'src/app/reducers';\n\n@Component({\n  selector: 'app-countby',\n  templateUrl: './countby.component.html',\n  styleUrls: ['./countby.component.scss']\n})\nexport class CountbyComponent implements OnInit {\n\n  by$: Observable<number>;\n  constructor(private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.by$ = this.store.select(selectCounterBy);\n  }\n\n  countBy(by: number): void {\n    this.store.dispatch(countBySet({ by }));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./countby.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"btn-group\"\n     role=\"group\"\n     aria-label=\"Set Count By\">\n  <button type=\"button\"\n          [disabled]=\"(by$ | async) === 1\"\n          (click)=\"countBy(1)\"\n          class=\"btn btn-primary\">1</button>\n  <button type=\"button\"\n          [disabled]=\"(by$ | async) === 3\"\n          (click)=\"countBy(3)\"\n          class=\"btn btn-primary\">3</button>\n  <button type=\"button\"\n          [disabled]=\"(by$ | async) === 5\"\n          (click)=\"countBy(5)\"\n          class=\"btn btn-primary\">5</button>\n</div>\n"
        },
        {
            "name": "CounterComponent",
            "id": "component-CounterComponent-b96a1dd70c496018281ac5ff38f64048",
            "file": "src/app/components/counter/counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-counter",
            "styleUrls": [
                "./counter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "current$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "decrementDisabled$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "resetDisabled$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "decrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "increment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, ObservableInput } from 'rxjs';\nimport { AppState, selectCountDecrementDisabled, selectCounterResetDisabled, selectGetCurrentCount } from 'src/app/reducers';\nimport * as actions from '../../actions/counter.actions';\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.scss']\n})\nexport class CounterComponent implements OnInit {\n\n  current$: Observable<number>;\n  resetDisabled$: Observable<boolean>;\n  decrementDisabled$: Observable<boolean>;\n\n  constructor(private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.current$ = this.store.select(selectGetCurrentCount);\n    this.resetDisabled$ = this.store.select(selectCounterResetDisabled);\n    this.decrementDisabled$ = this.store.select(selectCountDecrementDisabled);\n\n  }\n\n  increment(): void {\n    this.store.dispatch(actions.countIncremented());\n  }\n\n  decrement(): void {\n    this.store.dispatch(actions.countDecremented());\n  }\n\n  reset(): void {\n    this.store.dispatch(actions.countReset());\n  }\n}\n\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./counter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <button (click)=\"decrement()\"\n          [disabled]=\"decrementDisabled$ | async\"\n          class=\"btn btn-primary\">-</button>\n  <span>{{ current$ | async }}</span>\n  <button (click)=\"increment()\"\n          class=\"btn btn-primary\">+</button>\n</div>\n<div>\n  <button (click)=\"reset()\"\n          [disabled]=\"resetDisabled$ | async\"\n          class=\"btn btn-danger\">Reset</button>\n</div>\n\n<app-countby></app-countby>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-79d47b98867381697c19f7452b532107",
            "file": "src/app/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counterStuff$",
                    "type": "Observable<CounterDashboard>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "stuff$",
                    "type": "Observable<ShoppingDashboard>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable, ObservableInput } from 'rxjs';\nimport { ShoppingDataService } from 'src/app/feature/communications/services/shopping-data.service';\nimport { CounterDashboard, ShoppingDashboard } from 'src/app/models';\nimport { map } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectCounterDashboard } from 'src/app/reducers';\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  stuff$: Observable<ShoppingDashboard>;\n  counterStuff$: Observable<CounterDashboard>;\n  constructor(\n    private store: Store<AppState>,\n    private shoppingService: ShoppingDataService) { }\n\n  ngOnInit(): void {\n\n    this.counterStuff$ = this.store.select(selectCounterDashboard);\n    this.stuff$ = this.shoppingService.getObservable()\n      .pipe(\n        map(items => {\n          return {\n            totalItems: items.length,\n            purchasedItems: items.filter(i => i.purchased === true).length,\n            unpurchasedItems: items.filter(i => i.purchased === false).length\n          } as ShoppingDashboard;\n        })\n      );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "shoppingService",
                        "type": "ShoppingDataService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingService",
                        "type": "ShoppingDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Your Shopping List</h5>\n    <h6 class=\"card-subtitle mb-2 text-muted\">Overview of your shopping list</h6>\n    <p class=\"card-text\">You have {{ (stuff$ | async)?.totalItems }}\n      items on your list ({{(stuff$ | async)?.purchasedItems}} are\n      purchased, {{ (stuff$ | async)?.unpurchasedItems}}are not)</p>\n    <a [routerLink]=\"['..','communications']\"\n       class=\"card-link\">See your List</a>\n  </div>\n</div>\n\n<div class=\"card\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">Your Redux Counter</h5>\n    <h6 class=\"card-subtitle mb-2 text-muted\">Overview of your ability to count</h6>\n    <p class=\"card-text\">You are at {{ (counterStuff$ | async)?.current}}\n      and you like to count by {{ (counterStuff$ | async)?.by }}.</p>\n    <a [routerLink]=\"['..','counter']\"\n       class=\"card-link\">Do some more counting!</a>\n  </div>\n</div>\n"
        },
        {
            "name": "ErrorDisplayComponent",
            "id": "component-ErrorDisplayComponent-fc4ed1520294b3102a9c6d054eafd5d6",
            "file": "src/app/components/error-display/error-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-error-display",
            "styleUrls": [
                "./error-display.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "hasError$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, ObservableInput } from 'rxjs';\nimport { applicationErrorCleared } from 'src/app/actions/app.actions';\nimport { AppState, selectErrorMessage, selectHasError } from 'src/app/reducers';\n\n@Component({\n  selector: 'app-error-display',\n  templateUrl: './error-display.component.html',\n  styleUrls: ['./error-display.component.scss']\n})\nexport class ErrorDisplayComponent implements OnInit {\n\n  hasError$: Observable<boolean>;\n  errorMessage$: Observable<string>;\n  constructor(private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.hasError$ = this.store.select(selectHasError);\n    this.errorMessage$ = this.store.select(selectErrorMessage);\n  }\n\n  dismiss(): void {\n    this.store.dispatch(applicationErrorCleared());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./error-display.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"hasError$ | async\"\n     class=\"alert alert-danger\">\n  <h3>{{ errorMessage$ | async }}</h3>\n  <button (click)=\"dismiss()\"\n          class=\"btn btn-danger\">X</button>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-cfce100a5e9af61f8db89290f7ebfad5",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "'blue'",
                    "line": 11
                },
                {
                    "name": "message",
                    "defaultValue": "'Default Message'",
                    "line": 10
                }
            ],
            "outputsClass": [
                {
                    "name": "onHeaderClicked",
                    "defaultValue": "new EventEmitter<{ message: string, when: string }>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doIt",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  @Input() message = 'Default Message';\n  @Input() backgroundColor = 'blue';\n\n  @Output() onHeaderClicked = new EventEmitter<{ message: string, when: string }>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  doIt(): void {\n    this.onHeaderClicked.emit({ message: this.message, when: new Date().toISOString() });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header [ngStyle]=\"{'color': backgroundColor}\">\n  <h1 (click)=\"doIt()\">{{ message }}</h1>\n</header>\n"
        },
        {
            "name": "LhsComponent",
            "id": "component-LhsComponent-14406284c130aa1c23bf3cba6d9bfd18",
            "file": "src/app/feature/communications/components/lhs/lhs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-lhs",
            "styleUrls": [
                "./lhs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./lhs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "setIt",
                    "args": [
                        {
                            "name": "val",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MessageService } from '../../services/message.service';\n\n@Component({\n  selector: 'app-lhs',\n  templateUrl: './lhs.component.html',\n  styleUrls: ['./lhs.component.scss']\n})\nexport class LhsComponent implements OnInit {\n\n  constructor(private service: MessageService) { }\n\n  ngOnInit(): void {\n  }\n\n  setIt(val: string): void {\n    this.service.setMessage(val);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lhs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MessageService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MessageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-group\">\n  <input class=\"form-control\"\n         #val>\n  <button class=\"btn btn-primary\"\n          (click)=\"setIt(val.value)\">Set It</button>\n</div>\n"
        },
        {
            "name": "MastheadComponent",
            "id": "component-MastheadComponent-77f0fe7c8a0dc339cddf03ca2943ddf6",
            "file": "src/app/components/masthead/masthead.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-masthead",
            "styleUrls": [
                "./masthead.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./masthead.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-masthead',\n  templateUrl: './masthead.component.html',\n  styleUrls: ['./masthead.component.scss']\n})\nexport class MastheadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1 {\r\n  color: crimson\r\n}\r\n",
                    "styleUrl": "./masthead.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header class=\"container-fluid jumbotron\">\n  <h1>Front-End Web 200</h1>\n</header>\n"
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-f8df911b86bc99f8543acf98d667ab89",
            "file": "src/app/components/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [
                "./nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ul class=\"nav nav-tabs\">\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       [routerLinkActive]=\"['active']\"\n       [routerLink]=\"['dashboard']\">Dashboard</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       [routerLinkActive]=\"['active']\"\n       [routerLink]=\"['communications']\">Communications</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       [routerLinkActive]=\"['active']\"\n       [routerLink]=\"['counter']\">Redux Counter</a>\n  </li>\n  <li class=\"nav-item\">\n    <a class=\"nav-link\"\n       [routerLinkActive]=\"['active']\"\n       [routerLink]=\"['playlists']\">Playlists</a>\n  </li>\n</ul>\n"
        },
        {
            "name": "PlaylistsComponent",
            "id": "component-PlaylistsComponent-6326a96049abb4d34564e6356f9ad2b0",
            "file": "src/app/feature/playlists/playlists.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-playlists",
            "styleUrls": [
                "./playlists.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./playlists.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-playlists',\n  templateUrl: './playlists.component.html',\n  styleUrls: ['./playlists.component.scss']\n})\nexport class PlaylistsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./playlists.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <h2>Your Playlists</h2>\n</header>\n<app-song-entry></app-song-entry>\n<app-song-list></app-song-list>\n"
        },
        {
            "name": "RhsComponent",
            "id": "component-RhsComponent-421c30e8b1de2e9143b2d8a79de8905f",
            "file": "src/app/feature/communications/components/rhs/rhs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rhs",
            "styleUrls": [
                "./rhs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rhs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isEven$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "message$",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "doIt",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { MessageService } from '../../services/message.service';\nimport { tap, map, distinctUntilChanged, distinct } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-rhs',\n  templateUrl: './rhs.component.html',\n  styleUrls: ['./rhs.component.scss']\n})\nexport class RhsComponent implements OnInit, OnDestroy {\n\n\n  isEven$: Observable<boolean>;\n  message$: Observable<string>;\n  message = '';\n  sub: Subscription;\n  constructor(private service: MessageService) { }\n\n  ngOnInit(): void {\n    this.message$ = this.service\n      .getMessageObservable();\n\n    this.isEven$ = this.service\n      .getMessageObservable()\n      .pipe(\n        map(val => val.length % 2 === 0) // string -> boolean\n      );\n\n    this.sub = this.service\n      .getMessageObservable()\n      .pipe(\n        tap(val => console.log(val))\n      ).subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n  doIt(): void {\n    this.message = this.service.getMessage();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./rhs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MessageService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MessageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<span>{{ message }}</span>\n<button (click)=\"doIt()\"\n        class=\"btn btn-primary\">Refresh</button>\n<div>\n  <span>{{ message$ | async }}</span>\n</div>\n<span *ngIf=\"isEven$ | async\">It Is Even</span>\n"
        },
        {
            "name": "ShoppingComponent",
            "id": "component-ShoppingComponent-6ff7c0970e3a89b63649a543251f2c8a",
            "file": "src/app/feature/communications/components/shopping/shopping.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping",
            "styleUrls": [
                "./shopping.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "stuff$",
                    "type": "Observable<ShoppingListItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "onItemAdded",
                    "args": [
                        {
                            "name": "item",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ShoppingListItem } from '../../models';\nimport { ShoppingDataService } from '../../services/shopping-data.service';\n\n@Component({\n  selector: 'app-shopping',\n  templateUrl: './shopping.component.html',\n  styleUrls: ['./shopping.component.scss']\n})\nexport class ShoppingComponent implements OnInit {\n\n\n\n  stuff$: Observable<ShoppingListItem[]>;\n  constructor(private shoppingService: ShoppingDataService) { }\n\n  ngOnInit(): void {\n    this.stuff$ = this.shoppingService.getObservable();\n  }\n\n  onItemAdded(item: string): void {\n    this.shoppingService.addItem(item);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingDataService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingDataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<header>\n  <h3>Your Shopping List</h3>\n</header>\n<section>\n  <app-shopping-entry (itemAdded)=\"onItemAdded($event)\"></app-shopping-entry>\n</section>\n<section>\n  <app-shopping-list caption=\"Here is your shopping list\"\n                     [items]=\"stuff$ | async\"></app-shopping-list>\n</section>\n"
        },
        {
            "name": "ShoppingEntryComponent",
            "id": "component-ShoppingEntryComponent-f4ee327e8d44898a05d06a7d3fe31205",
            "file": "src/app/feature/communications/components/shopping-entry/shopping-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-entry",
            "styleUrls": [
                "./shopping-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "itemAdded",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-shopping-entry',\n  templateUrl: './shopping-entry.component.html',\n  styleUrls: ['./shopping-entry.component.scss']\n})\nexport class ShoppingEntryComponent implements OnInit {\n\n  form: FormGroup;\n  @Output() itemAdded = new EventEmitter<string>();\n  constructor(private formBuilder: FormBuilder) {\n    this.form = formBuilder.group({\n      item: ['', [Validators.required, Validators.maxLength(100)]]\n    });\n  }\n\n  get item(): AbstractControl { return this.form.get('item'); }\n  ngOnInit(): void {\n  }\n\n  submit(): void {\n    if (this.form.valid) {\n      // tell the parent, here is what they added.\n      // no guarantee they are listening.\n      this.itemAdded.emit(this.item.value);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n  margin-bottom: 24.5138px;\r\n}\r\n",
                    "styleUrl": "./shopping-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "item": {
                    "name": "item",
                    "getSignature": {
                        "name": "item",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 20
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\"\n      (ngSubmit)=\"submit()\">\n  <div class=\"form-group\">\n    <label for=\"item\">Item To Purchase</label>\n    <input type=\"text\"\n           name=\"item\"\n           formControlName=\"item\"\n           class=\"form-control\">\n    <div class=\"alert alert-danger\"\n         *ngIf=\"item.invalid && (item.touched || item.dirty)\">\n      <p *ngIf=\"item.errors?.required\">This is required.</p>\n      <p *ngIf=\"item.errors?.maxlength\">That is too many characters!</p>\n    </div>\n  </div>\n  <button type=\"submit\"\n          class=\"btn btn-primary\">Add Item To Your List</button>\n</form>\n"
        },
        {
            "name": "ShoppingListComponent",
            "id": "component-ShoppingListComponent-03ccad7b5731fdff67405e4a42953ed5",
            "file": "src/app/feature/communications/components/shopping-list/shopping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list",
            "styleUrls": [
                "./shopping-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caption",
                    "defaultValue": "'Your List of Stuff To Buy'",
                    "line": 11
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "ShoppingListItem[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ShoppingListItem } from '../../models';\n\n@Component({\n  selector: 'app-shopping-list',\n  templateUrl: './shopping-list.component.html',\n  styleUrls: ['./shopping-list.component.scss']\n})\nexport class ShoppingListComponent implements OnInit {\n\n  @Input() caption = 'Your List of Stuff To Buy';\n  @Input() items: ShoppingListItem[] = [];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".purchased {\r\n  text-decoration: line-through;\r\n  color: gray;\r\n}\r\n",
                    "styleUrl": "./shopping-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h4>{{caption}}</h4>\n<div class=\"alert\"\n     [ngClass]=\"{'alert-info': !item.purchased, 'alert-success': item.purchased}\"\n     *ngFor=\"let item of items\">\n  <button *ngIf=\"!item.purchased\"\n          class=\"btn btn-sm btn-danger\">X</button>\n  <span [ngClass]=\"{'purchased': item.purchased}\">\n    {{ item.description }}</span>\n</div>\n"
        },
        {
            "name": "SongEntryComponent",
            "id": "component-SongEntryComponent-6d32b2667aa09fe34bd122e225427a63",
            "file": "src/app/feature/playlists/containers/song-entry/song-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-song-entry",
            "styleUrls": [
                "./song-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./song-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-song-entry',\n  templateUrl: './song-entry.component.html',\n  styleUrls: ['./song-entry.component.scss']\n})\nexport class SongEntryComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./song-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-song-entry-form></app-song-entry-form>\n"
        },
        {
            "name": "SongEntryFormComponent",
            "id": "component-SongEntryFormComponent-1afa062fd97fff9369a9e1a1016b6424",
            "file": "src/app/feature/playlists/components/song-entry-form/song-entry-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-song-entry-form",
            "styleUrls": [
                "./song-entry-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./song-entry-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "focusMe",
                            "type": "HTMLInputElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "focusMe",
                            "type": "HTMLInputElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { songAdded } from '../../actions/song.actions';\nimport { PlaylistState } from '../../reducers';\n\n@Component({\n  selector: 'app-song-entry-form',\n  templateUrl: './song-entry-form.component.html',\n  styleUrls: ['./song-entry-form.component.scss']\n})\nexport class SongEntryFormComponent implements OnInit {\n\n  form: FormGroup;\n  constructor(\n    private formBuilder: FormBuilder,\n    private store: Store<PlaylistState>) { }\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      artist: ['', Validators.required],\n      album: ['']\n    });\n  }\n\n  get title(): AbstractControl { return this.form.get('title'); }\n  get artist(): AbstractControl { return this.form.get('artist'); }\n\n  submit(focusMe: HTMLInputElement): void {\n    console.log(this.form.value);\n    if (this.form.valid) {\n      this.store.dispatch(songAdded(this.form.value));\n      this.form.reset();\n      focusMe.focus();\n    } else {\n      Object.keys(this.form.controls).forEach(field => {\n        const control = this.form.get(field);\n        control.markAsTouched({ onlySelf: true });\n      });\n      focusMe.focus();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./song-entry-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<PlaylistState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<PlaylistState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 27
                    }
                },
                "artist": {
                    "name": "artist",
                    "getSignature": {
                        "name": "artist",
                        "type": "",
                        "returnType": "AbstractControl",
                        "line": 28
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\"\n      (ngSubmit)=\"submit(me)\">\n\n  <div class=\"form-group\">\n    <label for=\"title\">Title</label>\n    <input class=\"form-control\"\n           name=\"title\"\n           #me\n           formControlName=\"title\">\n    <div class=\"alert alert-danger\"\n         *ngIf=\"title.invalid && (title.touched || title.dirty)\">\n      <p *ngIf=\"title.errors.required\">Title is required</p>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"artist\">Artist</label>\n    <input class=\"form-control\"\n           name=\"artist\"\n           formControlName=\"artist\">\n    <div class=\"alert alert-danger\"\n         *ngIf=\"artist.invalid && (artist.touched || artist.dirty)\">\n      <p *ngIf=\"artist.errors.required\">Artist is required</p>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"album\">Album</label>\n    <input class=\"form-control\"\n           name=\"album\"\n           formControlName=\"album\">\n  </div>\n  <button type=\"submit\"\n          class=\"btn btn-success\">Add Artist</button>\n</form>\n"
        },
        {
            "name": "SongListComponent",
            "id": "component-SongListComponent-efbcdfa04854ab5cdc3ed23a30f6d859",
            "file": "src/app/feature/playlists/containers/song-list/song-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-song-list",
            "styleUrls": [
                "./song-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./song-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "playList$",
                    "type": "Observable<SongSummaryModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { SongSummaryModel } from '../../models';\nimport { PlaylistState, selectSongListModel } from '../../reducers';\n\n@Component({\n  selector: 'app-song-list',\n  templateUrl: './song-list.component.html',\n  styleUrls: ['./song-list.component.scss']\n})\nexport class SongListComponent implements OnInit {\n\n  playList$: Observable<SongSummaryModel[]>;\n  constructor(private store: Store<PlaylistState>) { }\n\n  ngOnInit(): void {\n    this.playList$ = this.store.select(selectSongListModel);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./song-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<PlaylistState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<PlaylistState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-song-summary-list [list]=\"playList$ | async\"></app-song-summary-list>\n"
        },
        {
            "name": "SongSummaryListComponent",
            "id": "component-SongSummaryListComponent-f4baa03e2c67049d2a9f0145cd40a884",
            "file": "src/app/feature/playlists/components/song-summary-list/song-summary-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-song-summary-list",
            "styleUrls": [
                "./song-summary-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./song-summary-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "list",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "SongSummaryModel[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { SongSummaryModel } from '../../models/song-summary-item';\n\n@Component({\n  selector: 'app-song-summary-list',\n  templateUrl: './song-summary-list.component.html',\n  styleUrls: ['./song-summary-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SongSummaryListComponent implements OnInit {\n\n  @Input() list: SongSummaryModel[] = [];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".card {\r\n  margin-bottom: 20.38px\r\n}\r\n",
                    "styleUrl": "./song-summary-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\"\n     *ngFor=\"let song of list\">\n  <div class=\"card-body\">\n    <h5 class=\"card-title\">{{ song .title }} by {{ song.artist }}</h5>\n    <h6 class=\"card-subtitle mb-2 text-muted\">Song: {{song.title}}</h6>\n    <p *ngIf=\"song.album\"\n       class=\"card-text\">{{ song.title }} is on the Album {{ song.artist }}</p>\n    <p *ngIf=\"!song.album\"><em>Unknown Album</em></p>\n    <div *ngIf=\"!song.isSaved\"\n         class=\"alert alert-info\">\n      <p><em>Saving Your Song...</em></p>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CountbyComponent"
                        },
                        {
                            "name": "CounterComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "ErrorDisplayComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "MastheadComponent"
                        },
                        {
                            "name": "NavComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CommunicationsModule"
                        },
                        {
                            "name": "PlaylistsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommunicationsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CommunicationsComponent"
                        },
                        {
                            "name": "LhsComponent"
                        },
                        {
                            "name": "RhsComponent"
                        },
                        {
                            "name": "ShoppingComponent"
                        },
                        {
                            "name": "ShoppingEntryComponent"
                        },
                        {
                            "name": "ShoppingListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CommunicationsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlaylistsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PlaylistDataService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PlaylistsComponent"
                        },
                        {
                            "name": "SongEntryComponent"
                        },
                        {
                            "name": "SongEntryFormComponent"
                        },
                        {
                            "name": "SongListComponent"
                        },
                        {
                            "name": "SongSummaryListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PlaylistsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "",
                "defaultValue": "createEntityAdapter<SongEntity>()"
            },
            {
                "name": "applicationError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/app.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[app] application error',\r\n  props<{ feature: string, error: string }>()\r\n)"
            },
            {
                "name": "applicationErrorCleared",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/app.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[app] application error cleared'\r\n)"
            },
            {
                "name": "applicationStarted",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/app.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[app] APPLICATION_STARTED'\r\n)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "countBySet",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/counter.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[app counter] count by set',\r\n  props<{ by: number }>()\r\n)"
            },
            {
                "name": "countDecremented",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/counter.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[app counter] count decremented'\r\n)"
            },
            {
                "name": "countIncremented",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/counter.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[app counter] count incremented'\r\n)"
            },
            {
                "name": "countReset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/actions/counter.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[app counter] count reset'\r\n)"
            },
            {
                "name": "currentId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  playlistUrl: 'http://api.myapp.com/v1/playlists'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  playlistUrl: 'http://localhost:3000/playlists/'\n}"
            },
            {
                "name": "featureName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/index.ts",
                "type": "string",
                "defaultValue": "'playlistFeature'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/counter.reducer.ts",
                "type": "CounterState",
                "defaultValue": "{\r\n  current: 0,\r\n  by: 1\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/errors.reducer.ts",
                "type": "ErrorState",
                "defaultValue": "{\r\n  message: null,\r\n  feature: null,\r\n  hasError: false\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getInitialState()"
            },
            {
                "name": "loadSongs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[playlists songs] load the songs from the api'\r\n)"
            },
            {
                "name": "loadSongsFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[playlists songs] loading the songs failed',\r\n  props<{ errorMessage: string }>()\r\n)"
            },
            {
                "name": "loadSongsSucceeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[playlists songs] loading the songs succeeded',\r\n  props<{ payload: SongEntity[] }>()\r\n)"
            },
            {
                "name": "myReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/counter.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(actions.countIncremented, (s) => ({ ...s, current: s.current + s.by })),\r\n  on(actions.countDecremented, (s) => ({ ...s, current: s.current - s.by })),\r\n  on(actions.countReset, () => initialState),\r\n  on(actions.countBySet, (s, a) => ({ ...s, by: a.by }))\r\n  // on(actions.countBySet, (state, action) => {\r\n  //   state.by = action.by;\r\n  //   return state;\r\n  // })\r\n)"
            },
            {
                "name": "myReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/errors.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(actions.applicationError, (s, a) => ({\r\n    hasError: true,\r\n    message: `Feature ${a.feature} had an error: ${a.error}`,\r\n    feature: a.feature\r\n  })),\r\n  on(actions.applicationErrorCleared, () => initialState)\r\n)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducerFunction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(actions.songAdded, (s, a) => adapter.addOne(a.payload, s)),\r\n  on(actions.loadSongsSucceeded, (s, a) => adapter.setAll(a.payload, s)),\r\n  on(actions.songAddedSuccessfully, (s, a) => {\r\n    const tempState = adapter.removeOne(a.oldId, s);\r\n    return adapter.addOne(a.payload, tempState); // ole' switcharoo\r\n  }),\r\n  on(actions.songAddedFailure, (s, a) => adapter.removeOne(a.oldId, s))\r\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  counter: fromCounter.reducer,\r\n  errors: fromErrors.reducer\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/index.ts",
                "type": "ActionReducerMap<PlaylistState>",
                "defaultValue": "{\r\n  songs: fromSongs.reducer\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectCountCurrent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCounterBranch,\r\n  c => c.current)"
            },
            {
                "name": "selectCountDecrementDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  selectCounterBy,\r\n  (c, b) => (c - b) < 0\r\n)"
            },
            {
                "name": "selectCounterBy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCounterBranch,\r\n  b => b.by\r\n)"
            },
            {
                "name": "selectCounterDashboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  selectCounterBy,\r\n  (current, by) => ({ by, current } as models.CounterDashboard)\r\n)"
            },
            {
                "name": "selectCounterResetDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  c => c === 0\r\n)"
            },
            {
                "name": "selectErrorMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectErrorsBranch,\r\n  b => b.message\r\n)"
            },
            {
                "name": "selectFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<PlaylistState>(featureName)"
            },
            {
                "name": "selectGetCurrentCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  c => c\r\n)"
            },
            {
                "name": "selectHasError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectErrorsBranch,\r\n  b => b.hasError\r\n)"
            },
            {
                "name": "selectSongListModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectSongArray,\r\n  songs => songs.map(song => {\r\n    return {\r\n      ...song,\r\n      isSaved: !song.id.startsWith('TEMP')\r\n    } as models.SongSummaryModel;\r\n  })\r\n)"
            },
            {
                "name": "selectSongsBranch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectFeature,\r\n  f => f.songs\r\n)"
            },
            {
                "name": "songAdded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[playlists songs] song added request',\r\n  ({ title, artist, album }: { title: string, artist: string, album?: string }) => ({\r\n    payload: {\r\n      id: 'TEMP' + currentId++,\r\n      title,\r\n      artist,\r\n      album\r\n    } as SongEntity\r\n  })\r\n)"
            },
            {
                "name": "songAddedFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[playlist songs] song added failure',\r\n  props<{ oldId: string, errorMessage: string }>()\r\n)"
            },
            {
                "name": "songAddedSuccessfully",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[playlist songs] song added successfully',\r\n  props<{ oldId: string, payload: SongEntity }>()\r\n)"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/header/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args\r\n})"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/feature/playlists/reducers/index.ts",
                "type": "",
                "defaultValue": "fromSongs.adapter.getSelectors(selectSongsBranch)"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/reducers/counter.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "CounterState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/reducers/errors.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "ErrorState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "SongState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "selectCounterBranch",
                "file": "src/app/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    }
                ],
                "returnType": "fromCounter.CounterState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "selectErrorsBranch",
                "file": "src/app/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    }
                ],
                "returnType": "fromErrors.ErrorState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/feature/playlists/reducers/songs.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                    "type": "",
                    "defaultValue": "createEntityAdapter<SongEntity>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getInitialState()"
                },
                {
                    "name": "reducerFunction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(actions.songAdded, (s, a) => adapter.addOne(a.payload, s)),\r\n  on(actions.loadSongsSucceeded, (s, a) => adapter.setAll(a.payload, s)),\r\n  on(actions.songAddedSuccessfully, (s, a) => {\r\n    const tempState = adapter.removeOne(a.oldId, s);\r\n    return adapter.addOne(a.payload, tempState); // ole' switcharoo\r\n  }),\r\n  on(actions.songAddedFailure, (s, a) => adapter.removeOne(a.oldId, s))\r\n)"
                }
            ],
            "src/app/actions/app.actions.ts": [
                {
                    "name": "applicationError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/app.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[app] application error',\r\n  props<{ feature: string, error: string }>()\r\n)"
                },
                {
                    "name": "applicationErrorCleared",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/app.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[app] application error cleared'\r\n)"
                },
                {
                    "name": "applicationStarted",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/app.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[app] APPLICATION_STARTED'\r\n)"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/actions/counter.actions.ts": [
                {
                    "name": "countBySet",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/counter.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[app counter] count by set',\r\n  props<{ by: number }>()\r\n)"
                },
                {
                    "name": "countDecremented",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/counter.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[app counter] count decremented'\r\n)"
                },
                {
                    "name": "countIncremented",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/counter.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[app counter] count incremented'\r\n)"
                },
                {
                    "name": "countReset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/actions/counter.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[app counter] count reset'\r\n)"
                }
            ],
            "src/app/feature/playlists/actions/song.actions.ts": [
                {
                    "name": "currentId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/actions/song.actions.ts",
                    "type": "number",
                    "defaultValue": "1"
                },
                {
                    "name": "loadSongs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/actions/song.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[playlists songs] load the songs from the api'\r\n)"
                },
                {
                    "name": "loadSongsFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/actions/song.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[playlists songs] loading the songs failed',\r\n  props<{ errorMessage: string }>()\r\n)"
                },
                {
                    "name": "loadSongsSucceeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/actions/song.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[playlists songs] loading the songs succeeded',\r\n  props<{ payload: SongEntity[] }>()\r\n)"
                },
                {
                    "name": "songAdded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/actions/song.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[playlists songs] song added request',\r\n  ({ title, artist, album }: { title: string, artist: string, album?: string }) => ({\r\n    payload: {\r\n      id: 'TEMP' + currentId++,\r\n      title,\r\n      artist,\r\n      album\r\n    } as SongEntity\r\n  })\r\n)"
                },
                {
                    "name": "songAddedFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/actions/song.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[playlist songs] song added failure',\r\n  props<{ oldId: string, errorMessage: string }>()\r\n)"
                },
                {
                    "name": "songAddedSuccessfully",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/actions/song.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[playlist songs] song added successfully',\r\n  props<{ oldId: string, payload: SongEntity }>()\r\n)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  playlistUrl: 'http://api.myapp.com/v1/playlists'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  playlistUrl: 'http://localhost:3000/playlists/'\n}"
                }
            ],
            "src/app/feature/playlists/reducers/index.ts": [
                {
                    "name": "featureName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/index.ts",
                    "type": "string",
                    "defaultValue": "'playlistFeature'"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/index.ts",
                    "type": "ActionReducerMap<PlaylistState>",
                    "defaultValue": "{\r\n  songs: fromSongs.reducer\r\n}"
                },
                {
                    "name": "selectFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<PlaylistState>(featureName)"
                },
                {
                    "name": "selectSongListModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectSongArray,\r\n  songs => songs.map(song => {\r\n    return {\r\n      ...song,\r\n      isSaved: !song.id.startsWith('TEMP')\r\n    } as models.SongSummaryModel;\r\n  })\r\n)"
                },
                {
                    "name": "selectSongsBranch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectFeature,\r\n  f => f.songs\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/feature/playlists/reducers/index.ts",
                    "type": "",
                    "defaultValue": "fromSongs.adapter.getSelectors(selectSongsBranch)"
                }
            ],
            "src/app/reducers/counter.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/counter.reducer.ts",
                    "type": "CounterState",
                    "defaultValue": "{\r\n  current: 0,\r\n  by: 1\r\n}"
                },
                {
                    "name": "myReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/counter.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(actions.countIncremented, (s) => ({ ...s, current: s.current + s.by })),\r\n  on(actions.countDecremented, (s) => ({ ...s, current: s.current - s.by })),\r\n  on(actions.countReset, () => initialState),\r\n  on(actions.countBySet, (s, a) => ({ ...s, by: a.by }))\r\n  // on(actions.countBySet, (state, action) => {\r\n  //   state.by = action.by;\r\n  //   return state;\r\n  // })\r\n)"
                }
            ],
            "src/app/reducers/errors.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/errors.reducer.ts",
                    "type": "ErrorState",
                    "defaultValue": "{\r\n  message: null,\r\n  feature: null,\r\n  hasError: false\r\n}"
                },
                {
                    "name": "myReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/errors.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(actions.applicationError, (s, a) => ({\r\n    hasError: true,\r\n    message: `Feature ${a.feature} had an error: ${a.error}`,\r\n    feature: a.feature\r\n  })),\r\n  on(actions.applicationErrorCleared, () => initialState)\r\n)"
                }
            ],
            "src/app/components/header/header.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/header/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n  component: HeaderComponent,\r\n  props: args\r\n})"
                }
            ],
            "src/app/reducers/index.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  counter: fromCounter.reducer,\r\n  errors: fromErrors.reducer\r\n}"
                },
                {
                    "name": "selectCountCurrent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCounterBranch,\r\n  c => c.current)"
                },
                {
                    "name": "selectCountDecrementDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  selectCounterBy,\r\n  (c, b) => (c - b) < 0\r\n)"
                },
                {
                    "name": "selectCounterBy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCounterBranch,\r\n  b => b.by\r\n)"
                },
                {
                    "name": "selectCounterDashboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  selectCounterBy,\r\n  (current, by) => ({ by, current } as models.CounterDashboard)\r\n)"
                },
                {
                    "name": "selectCounterResetDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  c => c === 0\r\n)"
                },
                {
                    "name": "selectErrorMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectErrorsBranch,\r\n  b => b.message\r\n)"
                },
                {
                    "name": "selectGetCurrentCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCountCurrent,\r\n  c => c\r\n)"
                },
                {
                    "name": "selectHasError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectErrorsBranch,\r\n  b => b.hasError\r\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/reducers/counter.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/reducers/counter.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "CounterState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/reducers/errors.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/reducers/errors.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "ErrorState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/feature/playlists/reducers/songs.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/feature/playlists/reducers/songs.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "SongState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/reducers/index.ts": [
                {
                    "name": "selectCounterBranch",
                    "file": "src/app/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        }
                    ],
                    "returnType": "fromCounter.CounterState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectErrorsBranch",
                    "file": "src/app/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        }
                    ],
                    "returnType": "fromErrors.ErrorState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "dashboard",
                        "component": "DashboardComponent"
                    },
                    {
                        "path": "communications",
                        "component": "CommunicationsComponent"
                    },
                    {
                        "path": "counter",
                        "component": "CounterComponent"
                    },
                    {
                        "path": "playlists",
                        "component": "PlaylistsComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "dashboard"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/app.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/app.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationErrorCleared",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/app.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationStarted",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "countBySet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "countDecremented",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "countIncremented",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/actions/counter.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "countReset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/countby/countby.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CountbyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/counter/counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/error-display/error-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/masthead/masthead.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MastheadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/effects/counter.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CounterEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/communications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommunicationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/components/lhs/lhs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LhsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/components/rhs/rhs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RhsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/components/shopping-entry/shopping-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/components/shopping-list/shopping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/components/shopping/shopping.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/models/shopping-list-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/services/message.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/communications/services/shopping-data.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ShoppingDataService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currentId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSongs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSongsFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSongsSucceeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "songAdded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "songAddedFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/actions/song.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "songAddedSuccessfully",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/components/song-entry-form/song-entry-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SongEntryFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/components/song-summary-list/song-summary-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SongSummaryListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/containers/song-entry/song-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SongEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/containers/song-list/song-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SongListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/effects/song.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SongEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/models/song-summary-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SongSummaryModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/playlists.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlaylistsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlaylistState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "featureName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSongListModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSongsBranch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SongEntity",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SongState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/reducers/songs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducerFunction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/services/playlist-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlaylistDataService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/feature/playlists/services/playlist-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlaylistsResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/dashboard.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CounterDashboard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/dashboard.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingDashboard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/counter.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CounterState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/counter.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/counter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/counter.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/errors.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/errors.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/errors.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/errors.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "myReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "selectCounterBranch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "selectErrorsBranch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCountCurrent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCountDecrementDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCounterBy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCounterDashboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCounterResetDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGetCurrentCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}